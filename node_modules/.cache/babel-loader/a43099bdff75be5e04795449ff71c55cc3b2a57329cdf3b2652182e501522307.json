{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer from '../store/rootReducer';\nimport rootSaga from '../store/rootSaga';\n\n// Persist Config\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['appState'] // Add reducers you want to persist\n};\n\n// Persisted Reducer\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// Create Saga Middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Create Store with Middleware\nconst store = createStore(persistedReducer, applyMiddleware(sagaMiddleware));\n\n// Persistor\nconst persistor = persistStore(store);\n\n// Run Saga Middleware\nsagaMiddleware.run(rootSaga);\nexport { store, persistor };\nexport const forcePersistFlush = () => {\n  persistor.flush().then(() => {\n    console.log('State persisted successfully');\n  }).catch(err => {\n    console.error('Error while persisting state:', err);\n  });\n};","map":{"version":3,"names":["createStore","applyMiddleware","createSagaMiddleware","persistStore","persistReducer","storage","rootReducer","rootSaga","persistConfig","key","whitelist","persistedReducer","sagaMiddleware","store","persistor","run","forcePersistFlush","flush","then","console","log","catch","err","error"],"sources":["/Users/dev/Documents/project/school-management-system/src/store/store.js"],"sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer from '../store/rootReducer';\nimport rootSaga from '../store/rootSaga';\n\n// Persist Config\nconst persistConfig = {\n    key: 'root',\n    storage,\n    whitelist: ['appState'], // Add reducers you want to persist\n};\n\n// Persisted Reducer\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// Create Saga Middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Create Store with Middleware\nconst store = createStore(\n    persistedReducer,\n    applyMiddleware(sagaMiddleware)\n);\n\n// Persistor\nconst persistor = persistStore(store);\n\n// Run Saga Middleware\nsagaMiddleware.run(rootSaga);\n\nexport { store, persistor };\n\nexport const forcePersistFlush = () => {\n    persistor.flush().then(() => {\n        console.log('State persisted successfully');\n    }).catch(err => {\n        console.error('Error while persisting state:', err);\n    });\n};\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,eAAe,QAAQ,OAAO;AACpD,OAAOC,oBAAoB,MAAM,YAAY;AAC7C,SAASC,YAAY,EAAEC,cAAc,QAAQ,eAAe;AAC5D,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,QAAQ,MAAM,mBAAmB;;AAExC;AACA,MAAMC,aAAa,GAAG;EAClBC,GAAG,EAAE,MAAM;EACXJ,OAAO;EACPK,SAAS,EAAE,CAAC,UAAU,CAAC,CAAE;AAC7B,CAAC;;AAED;AACA,MAAMC,gBAAgB,GAAGP,cAAc,CAACI,aAAa,EAAEF,WAAW,CAAC;;AAEnE;AACA,MAAMM,cAAc,GAAGV,oBAAoB,CAAC,CAAC;;AAE7C;AACA,MAAMW,KAAK,GAAGb,WAAW,CACrBW,gBAAgB,EAChBV,eAAe,CAACW,cAAc,CAClC,CAAC;;AAED;AACA,MAAME,SAAS,GAAGX,YAAY,CAACU,KAAK,CAAC;;AAErC;AACAD,cAAc,CAACG,GAAG,CAACR,QAAQ,CAAC;AAE5B,SAASM,KAAK,EAAEC,SAAS;AAEzB,OAAO,MAAME,iBAAiB,GAAGA,CAAA,KAAM;EACnCF,SAAS,CAACG,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;IACzBC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;EAC/C,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAI;IACZH,OAAO,CAACI,KAAK,CAAC,+BAA+B,EAAED,GAAG,CAAC;EACvD,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}